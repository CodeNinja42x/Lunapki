{"ast":null,"code":"var _jsxFileName = \"/Users/gorkemberkeyuksel/Documents/GitHub/Lunapki/crypto_trading_bot/src/components/ProfitGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProfitGraph() {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const data = await response.json();\n      setChartData({\n        labels: ['BTC'],\n        datasets: [{\n          label: 'BTC Price',\n          data: [parseFloat(data.price)],\n          // Fiyatı grafiğe yerleştir\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"BTC Price Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ProfitGraph, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = ProfitGraph;\nexport default ProfitGraph;\nvar _c;\n$RefreshReg$(_c, \"ProfitGraph\");","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","ProfitGraph","_s","chartData","setChartData","fetchData","response","fetch","data","json","labels","datasets","label","parseFloat","price","backgroundColor","borderColor","borderWidth","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gorkemberkeyuksel/Documents/GitHub/Lunapki/crypto_trading_bot/src/components/ProfitGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nfunction ProfitGraph() {\n  const [chartData, setChartData] = useState({});\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const data = await response.json();\n\n      setChartData({\n        labels: ['BTC'],\n        datasets: [\n          {\n            label: 'BTC Price',\n            data: [parseFloat(data.price)], // Fiyatı grafiğe yerleştir\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n          },\n        ],\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>BTC Price Graph</h2>\n      <Line data={chartData} />\n    </div>\n  );\n}\n\nexport default ProfitGraph;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9C,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;MAC9D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElCL,YAAY,CAAC;QACXM,MAAM,EAAE,CAAC,KAAK,CAAC;QACfC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,WAAW;UAClBJ,IAAI,EAAE,CAACK,UAAU,CAACL,IAAI,CAACM,KAAK,CAAC,CAAC;UAAE;UAChCC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBxB,OAAA,CAACF,IAAI;MAACU,IAAI,EAAEL;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV;AAACtB,EAAA,CAnCQD,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AAqCpB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}